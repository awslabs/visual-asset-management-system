/*
 * Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import * as cdk from "aws-cdk-lib";
import { Construct } from "constructs";
import { Bucket, BlockPublicAccess } from "aws-cdk-lib/aws-s3";
import { RemovalPolicy } from "aws-cdk-lib";
import {
    CodeBuildAction,
    CodeStarConnectionsSourceAction,
} from "aws-cdk-lib/aws-codepipeline-actions";
import { Artifact, Pipeline } from "aws-cdk-lib/aws-codepipeline";
import {
    BuildSpec,
    LinuxBuildImage,
    PipelineProject,
    ComputeType,
} from "aws-cdk-lib/aws-codebuild";
import { PolicyStatement, AccountRootPrincipal, PolicyDocument } from "aws-cdk-lib/aws-iam";
import { NagSuppressions } from "cdk-nag/lib/nag-suppressions";
import { Key } from "aws-cdk-lib/aws-kms";

export class CodePipelineStack extends cdk.Stack {
    constructor(scope: Construct, id: string, props?: cdk.StackProps) {
        super(scope, id, props);

        const region = props?.env?.region || "us-east-1";
        const stackName = process.env.STACK_NAME || this.node.tryGetContext("stack-name");
        const pipelineName = props?.stackName;
        const dockerDefaultPlatform = process.env.DOCKER_DEFAULT_PLATFORM || "linux/amd64";
        const adminEmailAddress =
            process.env.VAMS_ADMIN_EMAIL || this.node.tryGetContext("adminEmailAddress");
        const repositoryOwner = process.env.REPO_OWNER || this.node.tryGetContext("repo-owner");
        const connectionArn =
            process.env.CONNECTION_ARN || this.node.tryGetContext("connection-arn");
        const branch = process.env.BRANCH_NAME || "main";
        const pipelineActivatePCVisualizer = process.env.pipelineActivatePCVisualizer || "false";

        console.log("REGION ðŸ‘‰", region);
        console.log("STACK NAME ðŸ‘‰", stackName);
        console.log("PIPELINE NAME ðŸ‘‰", pipelineName);
        console.log("ADMIN EMAIL ADDRESS ðŸ‘‰", adminEmailAddress);
        console.log("REPO OWNER ðŸ‘‰", repositoryOwner);
        console.log("BRANCH ðŸ‘‰", branch);
        console.log("CONNECTION_ARN ðŸ‘‰", connectionArn);
        console.log("PIPELINE ACTIVATED PCVISUALIZER ðŸ‘‰", pipelineActivatePCVisualizer);

        //Encryption key for S3 bucket
        const kms = new Key(this, "VamsCodePipelineEncryptionKey", {
            alias: "vams-code-pipeline-encryption-key",
            enableKeyRotation: true,
            policy: new PolicyDocument({
                statements: [
                    new PolicyStatement({
                        actions: ["kms:*"],
                        resources: ["*"],
                        principals: [new AccountRootPrincipal()],
                    }),
                ],
            }),
        });

        //Artifact bucket for CodeBuild projects
        //Create custom bucket as default bucket generated by CDK as Server access logs disabled
        const artifactBucket = new Bucket(this, "ArtifactBucket", {
            bucketName: `vams-${stackName}-artifact-bucket`,
            encryptionKey: kms,
            blockPublicAccess: BlockPublicAccess.BLOCK_ALL,
            enforceSSL: true,
            versioned: false,
            removalPolicy: RemovalPolicy.RETAIN,
            serverAccessLogsPrefix: "access-logs/",
        });

        const pipeline = new Pipeline(this, "Pipeline", {
            pipelineName: `vams-${stackName}-pipeline`,
            artifactBucket: artifactBucket,
        });

        // Download VAMS from external repository using CodeStar connection
        const vamsSourceArtifact = new Artifact("VamsStack");
        const vamsSourceAction = new CodeStarConnectionsSourceAction({
            branch: branch,
            connectionArn: connectionArn,
            output: vamsSourceArtifact,
            owner: repositoryOwner,
            repo: "visual-asset-management-system",
            actionName: "Download_Vams",
        });

        pipeline.addStage({
            stageName: "SourceStage",
            actions: [vamsSourceAction],
        });

        // Setup environment for Vams application
        // Build infra and web folder and synth VAMS stacks
        const prepareVAMSProject = new PipelineProject(this, "PrepareVAMSProject", {
            buildSpec: BuildSpec.fromObject({
                version: "0.2",
                phases: {
                    install: {
                        commands: ["cd web", "yarn install", "cd ../infra", "npm install"],
                    },
                    build: {
                        commands: [
                            "ls",
                            "cd ../web",
                            "npm run build",
                            "cd ../infra",
                            "npm run build",
                            "npm install -g aws-cdk",
                            "cdk synth",
                        ],
                    },
                },
                artifacts: {
                    // store the entire Cloud Assembly as the output artifact
                    "base-directory": "infra/cdk.out",
                    files: "**/*",
                },
            }),
            environment: {
                buildImage: LinuxBuildImage.STANDARD_7_0,
                privileged: true,
                computeType: ComputeType.MEDIUM,
            },
            environmentVariables: {
                VAMS_ADMIN_EMAIL: { value: adminEmailAddress },
                DOCKER_DEFAULT_PLATFORM: { value: "linux/amd64" },
                STACK_NAME: { value: stackName },
                REGION: { value: region },
                PIPELINEACTIVATE_PCVISUALIZER: { value: pipelineActivatePCVisualizer },
            },
        });
        // Give permissions to build stage
        addPermissions(prepareVAMSProject);

        // Build CodeBuild artifact for VAMS
        const prepareVAMSOutput = new Artifact("Synth");
        const prepareVAMSAction = new CodeBuildAction({
            actionName: "PrepareVAMSStack",
            project: prepareVAMSProject,
            input: vamsSourceArtifact,
            outputs: [prepareVAMSOutput],
            runOrder: 1,
        });

        const vamsStackName = "vams-" + stackName + "-" + region;
        const vamsDeployCommand = `cdk -a . deploy ${vamsStackName} --require-approval=never --outputs-file config.json`;

        // Deploy VAMS using CDK on CodeBuild Project
        const deployVAMSProject = new PipelineProject(this, "DeployVAMSProject", {
            buildSpec: BuildSpec.fromObject({
                version: "0.2",
                phases: {
                    install: {
                        commands: ["npm install -g aws-cdk"],
                    },
                    build: {
                        commands: [vamsDeployCommand],
                    },
                },
                artifacts: {
                    files: "config.json",
                },
            }),
            environment: {
                buildImage: LinuxBuildImage.STANDARD_7_0,
                privileged: true,
                computeType: ComputeType.MEDIUM,
            },
        });

        // Give permission to deploy vams
        addPermissions(deployVAMSProject);

        const deployVAMSOutput = new Artifact("Deploy");
        const deployVAMSAction = new CodeBuildAction({
            actionName: "DeployVAMSStack",
            input: prepareVAMSOutput,
            project: deployVAMSProject,
            runOrder: 2,
            outputs: [deployVAMSOutput],
            environmentVariables: {
                VAMS_ADMIN_EMAIL: { value: adminEmailAddress },
                DOCKER_DEFAULT_PLATFORM: { value: "linux/amd64" },
                STACK_NAME: { value: stackName },
                REGION: { value: region },
            },
        });

        // Add build and deploy actions into pipeline
        pipeline.addStage({
            stageName: "Vams",
            actions: [prepareVAMSAction, deployVAMSAction],
        });

        // Adding NAG supression for IAM role as using the default service role with required permissions for S3 and KMS.
        NagSuppressions.addStackSuppressions(this, [
            {
                id: "AwsSolutions-IAM5",
                reason: "Using service roles created with required permissions by CDK for code pipeline with required permissions.",
            },
            {
                id: "AwsSolutions-CB3",
                reason: "The project requires access to Docker for building VAMS application and hence privileged mode is required.",
            },
        ]);
    }
}

function addPermissions(project: PipelineProject) {
    project.addToRolePolicy(
        new PolicyStatement({
            actions: ["sts:AssumeRole"],
            resources: [
                "arn:*:iam::*:role/*-deploy-role-*",
                "arn:*:iam::*:role/*-publishing-role-*",
            ],
        })
    );
    project.addToRolePolicy(
        new PolicyStatement({
            actions: ["cloudformation:DescribeStacks", "ec2:DescribeAvailabilityZones"],
            resources: ["*"], // this is needed to check the status of the bootstrap stack when doing `cdk deploy`
        })
    );
}
